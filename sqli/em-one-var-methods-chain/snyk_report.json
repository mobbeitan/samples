{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "SnykCode",
          "semanticVersion": "1.0.0",
          "version": "1.0.0",
          "rules": [
            {
              "id": "java/Sqli",
              "name": "Sqli",
              "shortDescription": {
                "text": "SQL Injection"
              },
              "defaultConfiguration": {
                "level": "error"
              },
              "help": {
                "markdown": "## Details\n\nIn an SQL injection attack, the user can submit an SQL query directly to the database, gaining access without providing appropriate credentials. Attackers can then view, export, modify, and delete confidential information; change passwords and other authentication information; and possibly gain access to other systems within the network. This is one of the most commonly exploited categories of vulnerability, but can largely be avoided through good coding practices.\n\n### Best practices for prevention\n* Avoid passing user-entered parameters directly to the SQL server.\n* Avoid using string concatenation to build SQL queries from user-entered parameters.\n* When coding, define SQL code first, then pass in parameters. Use prepared statements with parameterized queries. Examples include `SqlCommand()` in .NET and `bindParam()` in PHP.\n* Use strong typing for all parameters so unexpected user data will be rejected.\n* Where direct user input cannot be avoided for performance reasons, validate input against a very strict allowlist of permitted characters, avoiding special characters such as `? & / < > ; - ' \" \\` and spaces. Use a vendor-supplied escaping routine if possible.\n* Develop your application in an environment and/or using libraries that provide protection against SQL injection.\n* Harden your entire environment around a least-privilege model, ideally with isolated accounts with privileges only for particular tasks.",
                "text": ""
              },
              "properties": {
                "tags": [
                  "java"
                ],
                "categories": [
                  "Security"
                ],
                "exampleCommitFixes": [
                  {
                    "commitURL": "https://github.com/jeffdcamp/dbtools-android/commit/2643c30c302955a03233847c154350e424cca1d9?diff=split#diff-e2f0ab1619799e644c57ba98ebe6f39aL474",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 471,
                        "lineChange": "none"
                      },
                      {
                        "line": "public int delete(@Nonnull SQLiteDatabase db, @Nullable String where, @Nullable String[] whereArgs) {",
                        "lineNumber": 473,
                        "lineChange": "removed"
                      },
                      {
                        "line": "public int delete(@Nonnull DatabaseWrapper db, @Nullable String where, @Nullable String[] whereArgs) {",
                        "lineNumber": 412,
                        "lineChange": "added"
                      },
                      {
                        "line": "    checkDB(db);",
                        "lineNumber": 474,
                        "lineChange": "none"
                      },
                      {
                        "line": "    int rowsAffected = 0;",
                        "lineNumber": 475,
                        "lineChange": "none"
                      },
                      {
                        "line": "for (int tryCount = 0; tryCount < MAX_TRY_COUNT && !success; tryCount++) {",
                        "lineNumber": 479,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 480,
                        "lineChange": "none"
                      },
                      {
                        "line": "        rowsAffected = db.delete(getTableName(), where, whereArgs);",
                        "lineNumber": 481,
                        "lineChange": "none"
                      },
                      {
                        "line": "        postDeleteEvent(db, getTableName(), rowsAffected);",
                        "lineNumber": 482,
                        "lineChange": "none"
                      },
                      {
                        "line": "        success = true;",
                        "lineNumber": 483,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/keycloak/keycloak/commit/c8c86d2badb5ed97f9fbfe2c98e190c5a73cdb66?diff=split#diff-df89d441bd8b2c3dd63c28b12e23245dL47",
                    "lines": [
                      {
                        "line": "@Inject",
                        "lineNumber": 45,
                        "lineChange": "none"
                      },
                      {
                        "line": "private EntityManager entityManager;",
                        "lineNumber": 46,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Context",
                        "lineNumber": 48,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Path(\"{id}\")",
                        "lineNumber": 99,
                        "lineChange": "none"
                      },
                      {
                        "line": "@Produces(\"application/json\")",
                        "lineNumber": 100,
                        "lineChange": "none"
                      },
                      {
                        "line": "public Response findById(@PathParam(\"id\") String id) {",
                        "lineNumber": 101,
                        "lineChange": "none"
                      },
                      {
                        "line": "    List result = this.entityManager.createQuery(\"from Album where id = \" + id).getResultList();",
                        "lineNumber": 102,
                        "lineChange": "removed"
                      },
                      {
                        "line": "    List result = this.entityManager.createQuery(\"from Album where id = \" + Long.valueOf(id)).getResultList();",
                        "lineNumber": 102,
                        "lineChange": "added"
                      },
                      {
                        "line": "    if (result.isEmpty()) {",
                        "lineNumber": 104,
                        "lineChange": "none"
                      }
                    ]
                  },
                  {
                    "commitURL": "https://github.com/nuls-io/nuls/commit/7ff6aaf43ba54ec5cce6d03f7243e5a941fb3e4a?diff=split#diff-0444fba3b07c567a52ceed78978dc18bR532",
                    "lines": [
                      {
                        "line": "}",
                        "lineNumber": 536,
                        "lineChange": "none"
                      },
                      {
                        "line": " * @return",
                        "lineNumber": 529,
                        "lineChange": "added"
                      },
                      {
                        "line": " */",
                        "lineNumber": 530,
                        "lineChange": "added"
                      },
                      {
                        "line": "@Deprecated",
                        "lineNumber": 531,
                        "lineChange": "added"
                      },
                      {
                        "line": "public static Result delete(String area, String key) {",
                        "lineNumber": 538,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (!baseCheckArea(area)) {",
                        "lineNumber": 539,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return new Result(true, \"KV_AREA_NOT_EXISTS\");",
                        "lineNumber": 540,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 541,
                        "lineChange": "none"
                      },
                      {
                        "line": "    if (StringUtils.isBlank(key)) {",
                        "lineNumber": 542,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Result.getFailed(KernelErrorCode.NULL_PARAMETER);",
                        "lineNumber": 543,
                        "lineChange": "none"
                      },
                      {
                        "line": "    }",
                        "lineNumber": 544,
                        "lineChange": "none"
                      },
                      {
                        "line": "    try {",
                        "lineNumber": 545,
                        "lineChange": "none"
                      },
                      {
                        "line": "        DB db = AREAS.get(area);",
                        "lineNumber": 546,
                        "lineChange": "none"
                      },
                      {
                        "line": "        db.delete(bytes(key));",
                        "lineNumber": 547,
                        "lineChange": "none"
                      },
                      {
                        "line": "        return Result.getSuccess();",
                        "lineNumber": 548,
                        "lineChange": "none"
                      },
                      {
                        "line": "    } catch (Exception e) {",
                        "lineNumber": 549,
                        "lineChange": "none"
                      }
                    ]
                  }
                ],
                "exampleCommitDescriptions": [
                  "- Support hive user impersonation on hive tables page",
                  "* Moves converter pattern to Java 11",
                  "Add query logging."
                ],
                "precision": "very-high",
                "repoDatasetSize": 197,
                "cwe": [
                  "CWE-89"
                ]
              }
            }
          ]
        }
      },
      "results": [
        {
          "ruleId": "java/Sqli",
          "ruleIndex": 0,
          "level": "error",
          "message": {
            "text": "Unsanitized input from a command line argument flows into createQuery, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "markdown": "Unsanitized input from {0} {1} into {2}, where it is used in an SQL query. This may result in an SQL Injection vulnerability.",
            "arguments": [
              "[a command line argument](0)",
              "[flows](1),(2),(3),(4)",
              "[createQuery](5)"
            ]
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/main/java/SQLInjectionExample.java",
                  "uriBaseId": "%SRCROOT%"
                },
                "region": {
                  "startLine": 22,
                  "endLine": 22,
                  "startColumn": 19,
                  "endColumn": 44
                }
              }
            }
          ],
          "fingerprints": {
            "0": "d1cfeaa97d4f8916396a00449aa0dbeb69a5b56042d3f4d9b0738b038df8ef76",
            "1": "e6fcc0e0.392c50f6.aa4517d0.5fcd6977.cfaa293b.83a9d013.726fe049.77438af7.8df8fa68.c12e7b62.85628ab9.e22980a8.cfaa293b.83a9d013.726fe049.77438af7"
          },
          "codeFlows": [
            {
              "threadFlows": [
                {
                  "locations": [
                    {
                      "location": {
                        "id": 0,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/SQLInjectionExample.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 1,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/SQLInjectionExample.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 24,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 2,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/SQLInjectionExample.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 21,
                            "endLine": 21,
                            "startColumn": 16,
                            "endColumn": 31
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 3,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/SQLInjectionExample.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 45,
                            "endColumn": 93
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 4,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/SQLInjectionExample.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 45,
                            "endColumn": 99
                          }
                        }
                      }
                    },
                    {
                      "location": {
                        "id": 5,
                        "physicalLocation": {
                          "artifactLocation": {
                            "uri": "src/main/java/SQLInjectionExample.java",
                            "uriBaseId": "%SRCROOT%"
                          },
                          "region": {
                            "startLine": 22,
                            "endLine": 22,
                            "startColumn": 19,
                            "endColumn": 44
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "priorityScore": 850,
            "priorityScoreFactors": [
              {
                "label": true,
                "type": "hotFileSource"
              },
              {
                "label": true,
                "type": "fixExamples"
              }
            ]
          }
        }
      ],
      "properties": {
        "coverage": [
          {
            "files": 1,
            "isSupported": true,
            "lang": "XML"
          },
          {
            "files": 1,
            "isSupported": true,
            "lang": "Java"
          }
        ]
      }
    }
  ]
}
