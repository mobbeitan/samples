{
  "results": [
    {
      "type": "sast",
      "label": "sast",
      "id": "19293424",
      "similarityId": "-694064176",
      "status": "RECURRENT",
      "state": "TO_VERIFY",
      "severity": "MEDIUM",
      "created": "2023-02-06T10:25:12Z",
      "firstFoundAt": "2023-01-05T10:25:44Z",
      "foundAt": "2023-02-06T10:25:12Z",
      "firstScanId": "bf49f1df-70fe-4f3c-8f37-5b94bd1c9abd",
      "description": "Method @SourceMethod at line @SourceLine of @SourceFile gets user input from element @SourceElement. This input is later concatenated by the application directly into a string variable containing SQL commands, without being validated. This string is then used in method @DestinationMethod to query the database @DestinationElement, at line @DestinationLine of @DestinationFile, without any additional filtering by the database. This could allow the user to tamper with the filter parameter.\n\n",
      "descriptionHTML": "\u003cp\u003eMethod @SourceMethod at line @SourceLine of @SourceFile gets user input from element @SourceElement. This input is later concatenated by the application directly into a string variable containing SQL commands, without being validated. This string is then used in method @DestinationMethod to query the database @DestinationElement, at line @DestinationLine of @DestinationFile, without any additional filtering by the database. This could allow the user to tamper with the filter parameter.\u003c/p\u003e\n",
      "data": {
        "queryId": 7096281910242735216,
        "queryName": "Parameter_Tampering",
        "group": "Java_Medium_Threat",
        "resultHash": "92S5hxPsq7gHQg6oX0vlKec5Gi0=",
        "languageName": "Java",
        "nodes": [
          {
            "id": "+rvA0/12U6ruWFTVsxTLN2u2ckA=",
            "line": 17,
            "name": "args",
            "column": 38,
            "length": 4,
            "method": "main",
            "nodeID": 184,
            "domType": "ParamDecl",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.args",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "9x9rWbuqHPNjC2YL02V7KNGZZfs=",
            "line": 21,
            "name": "args",
            "column": 24,
            "length": 4,
            "method": "main",
            "nodeID": 117,
            "domType": "UnknownReference",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.args",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "E8WvThH6RYlAVsdtw1UNlRQVhoU=",
            "line": 21,
            "name": "login",
            "column": 16,
            "length": 5,
            "method": "main",
            "nodeID": 114,
            "domType": "Declarator",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.login",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "fH4xqWGX7QviK14btm1qMyfVhLs=",
            "line": 22,
            "name": "login",
            "column": 92,
            "length": 5,
            "method": "main",
            "nodeID": 136,
            "domType": "UnknownReference",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.login",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "tlpPBrSB09MnyU4t4XzSB1+Pqdg=",
            "line": 22,
            "name": "createQuery",
            "column": 48,
            "length": 1,
            "method": "main",
            "nodeID": 129,
            "domType": "MethodInvokeExpr",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.entityManager.createQuery",
            "typeName": "createQuery",
            "methodLine": 17,
            "definitions": "0"
          }
        ]
      },
      "comments": {},
      "vulnerabilityDetails": {
        "cweId": 472,
        "cvss": {},
        "compliances": [
          "OWASP Top 10 2021",
          "PCI DSS v3.2.1",
          "ASD STIG 4.10",
          "OWASP Top 10 2013",
          "OWASP Top 10 2017"
        ]
      }
    },
    {
      "type": "sast",
      "label": "sast",
      "id": "19293425",
      "similarityId": "253495091",
      "status": "RECURRENT",
      "state": "TO_VERIFY",
      "severity": "HIGH",
      "created": "2023-02-06T10:25:12Z",
      "firstFoundAt": "2023-01-05T10:25:44Z",
      "foundAt": "2023-02-06T10:25:12Z",
      "firstScanId": "bf49f1df-70fe-4f3c-8f37-5b94bd1c9abd",
      "description": "The application's @DestinationMethod method executes an SQL query with @DestinationElement, at line @DestinationLine of @DestinationFile. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\n\nAn attacker would be able to inject arbitrary syntax and data into the SQL query, by crafting a malicious payload and providing it via the input @SourceElement; this input is then read by the @SourceMethod method at line @SourceLine of @SourceFile. This input then flows through the code, into a query and to the database server - without sanitization.\r\n\r\nThis may enable an SQL Injection attack.\n\n",
      "descriptionHTML": "\u003cp\u003eThe application\u0026rsquo;s @DestinationMethod method executes an SQL query with @DestinationElement, at line @DestinationLine of @DestinationFile. The application constructs this SQL query by embedding an untrusted string into the query without proper sanitization. The concatenated string is submitted to the database, where it is parsed and executed accordingly.\u003c/p\u003e\n\n\u003cp\u003eAn attacker would be able to inject arbitrary syntax and data into the SQL query, by crafting a malicious payload and providing it via the input @SourceElement; this input is then read by the @SourceMethod method at line @SourceLine of @SourceFile. This input then flows through the code, into a query and to the database server - without sanitization.\r\n\r\nThis may enable an SQL Injection attack.\u003c/p\u003e\n",
      "data": {
        "queryId": 14517067005933136034,
        "queryName": "SQL_Injection",
        "group": "Java_High_Risk",
        "resultHash": "dHjLdqq4mjGSocE0EydqqcfVLMg=",
        "languageName": "Java",
        "nodes": [
          {
            "id": "+rvA0/12U6ruWFTVsxTLN2u2ckA=",
            "line": 17,
            "name": "args",
            "column": 38,
            "length": 4,
            "method": "main",
            "nodeID": 184,
            "domType": "ParamDecl",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.args",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "9x9rWbuqHPNjC2YL02V7KNGZZfs=",
            "line": 21,
            "name": "args",
            "column": 24,
            "length": 4,
            "method": "main",
            "nodeID": 117,
            "domType": "UnknownReference",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.args",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "E8WvThH6RYlAVsdtw1UNlRQVhoU=",
            "line": 21,
            "name": "login",
            "column": 16,
            "length": 5,
            "method": "main",
            "nodeID": 114,
            "domType": "Declarator",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.login",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "fH4xqWGX7QviK14btm1qMyfVhLs=",
            "line": 22,
            "name": "login",
            "column": 92,
            "length": 5,
            "method": "main",
            "nodeID": 136,
            "domType": "UnknownReference",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "fullName": "SQLInjectionExample.main.login",
            "typeName": "String",
            "methodLine": 17,
            "definitions": "1"
          },
          {
            "id": "pO2v7xaW2Kwwjy9QrLMU8Ske970=",
            "line": 22,
            "name": "BinaryExpr",
            "column": 98,
            "length": 1,
            "method": "main",
            "nodeID": 133,
            "domType": "BinaryExpr",
            "fileName": "/src/main/java/SQLInjectionExample.java",
            "methodLine": 17,
            "definitions": "-1"
          }
        ]
      },
      "comments": {},
      "vulnerabilityDetails": {
        "cweId": 89,
        "cvss": {},
        "compliances": [
          "FISMA 2014",
          "OWASP Top 10 2013",
          "OWASP Top 10 2021",
          "PCI DSS v3.2.1",
          "OWASP Top 10 2017",
          "ASD STIG 4.10",
          "OWASP Mobile Top 10 2016",
          "OWASP Top 10 API",
          "NIST SP 800-53"
        ]
      }
    }
  ],
  "totalCount": 2,
  "scanID": "3ce66dd7-02ca-4b57-a337-f6e8c50ebcda"
}
